//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license.
//
// Microsoft Teams: https://dev.office.com/microsoft-teams
//
// Bot Builder Microsoft Teams SDK GitHub
// https://github.com/OfficeDev/BotBuilder-MicrosoftTeams
//
// Copyright (c) Microsoft Corporation
// All rights reserved.
//
// MIT License:
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

//
// This class is auto generated by Microsoft Autorest with swagger file.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
//
// For Microsoft Autorest please refer to: https://github.com/Azure/autorest
// Teams class is a helper class having functions to make remote call to bot APIs
// It depends on ms-rest library, if your remote call is not working please check if ms-rest is installed.
// Please note the minimum version is 2.0.2.
//


'use strict';

var util = require('util');
var msRest = require('ms-rest');
var WebResource = msRest.WebResource;

/**
 * @class
 * Teams
 * Initializes a new instance of the Teams class.
 * @constructor
 *
 * @param {RestClient} client Reference to the service client.
 */

class Teams {
  constructor (client) {
    this.client = client;
  }

  fetchChannelList(teamsId, options, callback);
  fetchMemberList(conversationId, options, callback);
  fetchTeamInfo(teamsId, options, callback);
  beginReplyChainInChannel(channelId, message, options, callback);
  fetchMember(conversationId, memberId, options, callback);
}

/**
 * @summary Fetches channel list for a given team
 *
 * Fetch the channel list.
 *
 * @param {string} teamsId Team Id
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */

Teams.prototype.fetchChannelList = function (teamsId, options, callback) {
  var client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (teamsId === null || teamsId === undefined || typeof teamsId.valueOf() !== 'string') {
      throw new Error('teamsId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  var baseUrl = this.client.baseUri;
  var requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v3/teams/{teamsId}/conversations';
  requestUrl = requestUrl.replace('{teamsId}', encodeURIComponent(teamsId));

  // Create HTTP transport objects
  var httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(var headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, function (err, response, responseBody) {
    if (err) {
      return callback(err);
    }
    var statusCode = response.statusCode;
    if (statusCode !== 200) {
      var error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      var parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          var internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = util.format('Error "%s" occurred in deserializing the responseBody ' +
                         '- "%s" for the default response.', defaultError.message, responseBody);
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    var result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      var parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          var resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Object'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result['conversations'], httpRequest, response);
  });
}


/**
 * @summary Fetches member list for a given channel
 *
 * Fetch the member list.
 *
 * @param {string} conversationId Conversation Id
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ChannelAccount} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
Teams.prototype.fetchMemberList = function(conversationId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (conversationId === null || conversationId === undefined || typeof conversationId.valueOf() !== 'string') {
      throw new Error('conversationId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v3/conversations/{conversationId}/members';
  requestUrl = requestUrl.replace('{conversationId}', encodeURIComponent(conversationId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          var resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Object'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Fetches a specific member from the conversation thread
 * @param {string} conversationId Conversation Id
 * 
 * @param {string} memberId Member Id
 * 
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ChannelAccount} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
Teams.prototype.fetchMember = function(conversationId, memberId, options, callback) {
  /* jshint validthis: true */
 let client = this.client;
 if(!callback && typeof options === 'function') {
   callback = options;
   options = null;
 }
 if (!callback) {
   throw new Error('callback cannot be null.');
 }
 // Validate
 try {
   if (conversationId === null || conversationId === undefined || typeof conversationId.valueOf() !== 'string') {
     throw new Error('conversationId cannot be null or undefined and it must be of type string.');
   }
   if (memberId === null || memberId === undefined || typeof memberId.valueOf() !== 'string') {
    throw new Error('memberId cannot be null or undefined and it must be of type string.');
  }
 } catch (error) {
   return callback(error);
 }

 // Construct URL
 let baseUrl = this.client.baseUri;
 let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v3/conversations/{conversationId}/members/{memberId}';
 requestUrl = requestUrl.replace('{conversationId}', encodeURIComponent(conversationId));
 requestUrl = requestUrl.replace('{memberId}', encodeURIComponent(memberId));

 // Create HTTP transport objects
 let httpRequest = new WebResource();
 httpRequest.method = 'GET';
 httpRequest.headers = {};
 httpRequest.url = requestUrl;
 // Set Headers
 if(options) {
   for(let headerName in options['customHeaders']) {
     if (options['customHeaders'].hasOwnProperty(headerName)) {
       httpRequest.headers[headerName] = options['customHeaders'][headerName];
     }
   }
 }
 httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
 httpRequest.body = null;
 // Send Request
 return client.pipeline(httpRequest, (err, response, responseBody) => {
   if (err) {
     return callback(err);
   }
   let statusCode = response.statusCode;
   if (statusCode !== 200) {
     let error = new Error(responseBody);
     error.statusCode = response.statusCode;
     error.request = msRest.stripRequest(httpRequest);
     error.response = msRest.stripResponse(response);
     if (responseBody === '') responseBody = null;
     let parsedErrorResponse;
     try {
       parsedErrorResponse = JSON.parse(responseBody);
       if (parsedErrorResponse) {
         let internalError = null;
         if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
         error.code = internalError ? internalError.code : parsedErrorResponse.code;
         error.message = internalError ? internalError.message : parsedErrorResponse.message;
       }
     } catch (defaultError) {
       error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                        `- "${responseBody}" for the default response.`;
       return callback(error);
     }
     return callback(error);
   }
   // Create Result
   let result = null;
   if (responseBody === '') responseBody = null;
   // Deserialize Response
   if (statusCode === 200) {
     let parsedResponse = null;
     try {
       parsedResponse = JSON.parse(responseBody);
       result = JSON.parse(responseBody);
       if (parsedResponse !== null && parsedResponse !== undefined) {
         var resultMapper = {
           required: false,
           serializedName: 'parsedResponse',
           type: {
             name: 'Object'
           }
         };
         result = client.deserialize(resultMapper, parsedResponse, 'result');
       }
     } catch (error) {
       let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
       deserializationError.request = msRest.stripRequest(httpRequest);
       deserializationError.response = msRest.stripResponse(response);
       return callback(deserializationError);
     }
   }
   return callback(null, result, httpRequest, response);
 });
}

/**
 * @summary GetPagedConversationMembers
 *
 * Enumerate the members of a converstion, the result is paginated.
 *
 * This REST API takes a ConversationId and returns an object that coantains
 * array of ChannelAccount objects representing the members of the conversation
 * and continuationToken.
 *
 * @param {string} conversationId Conversation ID
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.pageSize] Page size
 *
 * @param {string} [options.continuationToken] continuationToken
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
Teams.prototype.fetchMemberListWithPaging = function(conversationId, options, callback) {
  /* jshint validthis: true */
 let client = this.client;
 if(!callback && typeof options === 'function') {
   callback = options;
   options = null;
 }
 if (!callback) {
   throw new Error('callback cannot be null.');
 }
 let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
 let continuationToken = (options && options.continuationToken !== undefined) ? options.continuationToken : undefined;
 // Validate
 try {
   if (conversationId === null || conversationId === undefined || typeof conversationId.valueOf() !== 'string') {
     throw new Error('conversationId cannot be null or undefined and it must be of type string.');
   }
   if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
     throw new Error('pageSize must be of type number.');
   }
   if (continuationToken !== null && continuationToken !== undefined && typeof continuationToken.valueOf() !== 'string') {
     throw new Error('continuationToken must be of type string.');
   }
 } catch (error) {
   return callback(error);
 }

 // Construct URL
 let baseUrl = this.client.baseUri;
 let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v3/conversations/{conversationId}/pagedMembers';
 requestUrl = requestUrl.replace('{conversationId}', encodeURIComponent(conversationId));
 let queryParameters = [];
 if (pageSize !== null && pageSize !== undefined) {
   queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
 }
 if (continuationToken !== null && continuationToken !== undefined) {
   queryParameters.push('continuationToken=' + encodeURIComponent(continuationToken));
 }
 if (queryParameters.length > 0) {
   requestUrl += '?' + queryParameters.join('&');
 }

 // Create HTTP transport objects
 let httpRequest = new WebResource();
 httpRequest.method = 'GET';
 httpRequest.url = requestUrl;
 httpRequest.headers = {};
 // Set Headers
 httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
 if(options) {
   for(let headerName in options['customHeaders']) {
     if (options['customHeaders'].hasOwnProperty(headerName)) {
       httpRequest.headers[headerName] = options['customHeaders'][headerName];
     }
   }
 }
 httpRequest.body = null;
 // Send Request
 return client.pipeline(httpRequest, (err, response, responseBody) => {
   if (err) {
     return callback(err);
   }
   let statusCode = response.statusCode;
   if (statusCode !== 200) {
     let error = new Error(responseBody);
     error.statusCode = response.statusCode;
     error.request = msRest.stripRequest(httpRequest);
     error.response = msRest.stripResponse(response);
     if (responseBody === '') responseBody = null;
     let parsedErrorResponse;
     try {
       parsedErrorResponse = JSON.parse(responseBody);
       if (parsedErrorResponse) {
         let internalError = null;
         if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
         error.code = internalError ? internalError.code : parsedErrorResponse.code;
         error.message = internalError ? internalError.message : parsedErrorResponse.message;
       }
       if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
         let resultMapper = new client.models['ErrorResponse']().mapper();
         error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
       }
     } catch (defaultError) {
       error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                        `- "${responseBody}" for the default response.`;
       return callback(error);
     }
     return callback(error);
   }
   // Create Result
   let result = null;
   if (responseBody === '') responseBody = null;
   // Deserialize Response
   if (statusCode === 200) {
     let parsedResponse = null;
     try {
       parsedResponse = JSON.parse(responseBody);
       result = JSON.parse(responseBody);
       if (parsedResponse !== null && parsedResponse !== undefined) {
         let resultMapper = {
           required: false,
           serializedName: 'parsedResponse',
           type: {
             name: 'Object'
           }
         };
         result = client.deserialize(resultMapper, parsedResponse, 'result');
       }
     } catch (error) {
       let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
       deserializationError.request = msRest.stripRequest(httpRequest);
       deserializationError.response = msRest.stripResponse(response);
       return callback(deserializationError);
     }
   }

   return callback(null, result, httpRequest, response);
 });
}

/**
 * @summary Fetches team info for a given team
 *
 * Fetches team info for a given team.
 *
 * @param {string} teamsId Team Id
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TeamInfo} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */

Teams.prototype.fetchTeamInfo = function (teamsId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (teamsId === null || teamsId === undefined || typeof teamsId.valueOf() !== 'string') {
      throw new Error('teamsId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v3/teams/{teamsId}';
  requestUrl = requestUrl.replace('{teamsId}', encodeURIComponent(teamsId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          var resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Object'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Begin a new reply chain in channel
 *
 * Begin a new reply chain in channel.
 *
 * @param {string} channelId Channel Id
 *
 * @param {object} message to send in channel.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link IChatConnectorAddress} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */

Teams.prototype.beginReplyChainInChannel = function (channelId, message, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (channelId === null || channelId === undefined || typeof channelId.valueOf() !== 'string') {
      throw new Error('channelId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v3/conversations';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  options.method = 'POST';
  options.url = requestUrl;
  options.headers = options['customHeaders'];
  // Set Body
  options.body = {
    activity: message,
    channelData: {
      teamsChannelId: channelId
    },
    json: true
  };
  httpRequest.prepare(options);
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          var resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Object'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

module.exports = Teams;
